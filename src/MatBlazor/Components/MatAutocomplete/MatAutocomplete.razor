@namespace MatBlazor
@typeparam TItem
@inherits BaseMatAutocomplete<TItem>

<div class="@WrapperClassMapper.AsString()">
    @base.BuildRenderTree
    @if (IsOpened)
    {
        <div class="mat-autocomplete-dropdown">
            <MatList @ref="ListRef" SingleSelection="true">
                @if (SearchResult?.ListResult != null)
                {
                    @foreach (var elementWrapper in SearchResult.ListResult)
                    {
                        <MatListItem OnMouseDown="((e) => ItemSelected(elementWrapper.Item))">
                            @if (ItemTemplate != null)
                            {
                                @ItemTemplate(elementWrapper.Item)
                            }
                            else
                            {
                                <MatListItemText>@(elementWrapper.Value)</MatListItemText>
                            }
                        </MatListItem>
                    }
                }
                else
                {
                    <MatListItem>
                        <MatProgressBar Indeterminate="true" />
                    </MatListItem>
                }
            </MatList>
        </div>
    }
</div>
@code
{

    protected override RenderFragment BuildRenderTreeChildContent()
    {
        return builder =>
        {
            builder.AddContent(0, base.BuildRenderTreeChildContent());
            if (IsShowingClearButton)
            {
                builder.AddContent(1, BuildClearButton());
            }
        };
    }

    protected RenderFragment BuildClearButton()
    {
        return@<div class="mat-autocomplete-clearbutton">
        <MatIconButton Icon="clear" type="button" OnClick="ClearText"></MatIconButton>
    </div>;
}
}